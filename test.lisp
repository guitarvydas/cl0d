(defun test ()
  (let ((m `( (a . ,(lambda () "hello")) (b . ,(lambda () "world")))))
    (apply (% m 'a) nil)))

(defun test2 ()
  (let ((m `( (a . ,(lambda () "hello")) (b . ,(lambda () "world")))))
    (apply (% m 'b) nil)))

(defun test3 ()
  (let ((q (FIFO/new)))
    (apply (% q 'enqueue) '(1))
    (apply (% q 'enqueue) '(2))
    (apply (% q 'enqueue) '(3))
    (apply (% q 'contents) nil)))

(defun test4 ()
  (let ((q (FIFO/new)))
    (apply (% q 'enqueue) '(1))
    (apply (% q 'enqueue) '(2))
    (apply (% q 'enqueue) '(3))
    (apply (% q 'dequeue) nil)
    (apply (% q 'dequeue) nil)
    (apply (% q 'dequeue) nil)
    ))

(defun test5 ()
  (let ((q (FIFO/new)))
    (apply (% q 'enqueue) '(1))
    (apply (% q 'enqueue) '(2))
    (apply (% q 'enqueue) '(3))
    (apply (% q 'dequeue) nil)
    (apply (% q 'dequeue) nil)
    (apply (% q 'dequeue) nil)
    (apply (% q 'empty?) nil)
    ))

(defun test6 ()
  (let ((echo (Echo/new "test")))
    (apply (%lookup echo 'handle) (list (Input-Message/new "stdin" "hello world")))
    (apply (%lookup echo 'outputs) nil)))

(defun test7 ()
  (let ((echo (Echo/new "test")))
    (apply (%lookup echo 'handle) (list (Input-Message/new "stdin" "hello world")))
    (apply (%lookup echo 'for-each-output)
           (list (lambda (msg)
                   (format *standard-output* "{~a: ~a}~%"
                           (apply (%lookup msg 'port) nil)
                           (apply (%lookup msg 'data) nil)
                           ))))
    (values)))

(defun display-message (msg)
  (format *standard-output* "{~a: ~a}~%"
          (apply (%lookup msg 'port) nil)
          (apply (%lookup msg 'data) nil)))

(defun test8 ()
  (let ((echo (Echo/new "test")))
    (apply (%lookup echo 'handle) (list (Input-Message/new "stdin" 1)))
    (apply (%lookup echo 'handle) (list (Input-Message/new "stdin" 2)))
    (apply (%lookup echo 'handle) (list (Input-Message/new "stdin" 3)))
    (apply (%lookup echo 'handle) (list (Input-Message/new "stdin" "Hello")))
    (apply (%lookup echo 'handle) (list (Input-Message/new "stdin" "World")))
    (apply (%lookup echo 'for-each-output) (list #'display-message))
    (values)))

(defun sequential ()
  (let ((children (list 
		   (Echo/new "child 1")
		   (Echo/new "child 2"))))
    (let ((connections (list
			(list 'down 0 "in" 1 "in")
			(list 'across 1 "out" 2 "in")
			(list 'up 1 "err" 0 "err")
			(list 'up 2 "out" 0 "out")
			(list 'up 2 "err" 0 "err"))))
      (SequentialTest/new "sequential" children connections))))

(defun parallel ()
  (let ((children (list 
		   (Echo/new "child 1")
		   (Echo/new "child 2"))))
    (let ((connections (list
			(list 'down 0 "in" 1 "in")
			(list 'across 1 "out" 2 "in")
			(list 'up 1 "err" 0 "err")
			(list 'up 2 "out" 0 "out")
			(list 'up 2 "err" 0 "err"))))
      (ParallelTest/new "sequential" children connections))))
