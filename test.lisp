(defun test ()
  (let ((m `( (a . ,(lambda () "hello")) (b . ,(lambda () "world")))))
    (apply (% m 'a) nil)))

(defun test2 ()
  (let ((m `( (a . ,(lambda () "hello")) (b . ,(lambda () "world")))))
    (apply (% m 'b) nil)))

(defun test3 ()
  (let ((q (FIFO/new)))
    (apply (% q 'enqueue) '(1))
    (apply (% q 'enqueue) '(2))
    (apply (% q 'enqueue) '(3))
    (apply (% q 'contents) nil)))

(defun test4 ()
  (let ((q (FIFO/new)))
    (apply (% q 'enqueue) '(1))
    (apply (% q 'enqueue) '(2))
    (apply (% q 'enqueue) '(3))
    (apply (% q 'dequeue) nil)
    (apply (% q 'dequeue) nil)
    (apply (% q 'dequeue) nil)
    ))

(defun test5 ()
  (let ((q (FIFO/new)))
    (apply (% q 'enqueue) '(1))
    (apply (% q 'enqueue) '(2))
    (apply (% q 'enqueue) '(3))
    (apply (% q 'dequeue) nil)
    (apply (% q 'dequeue) nil)
    (apply (% q 'dequeue) nil)
    (apply (% q 'empty?) nil)
    ))

(defun test6 ()
  (let ((echo (Echo/new "test")))
    (apply (%lookup echo 'handle) (list (Input-Message/new "stdin" "hello world")))
    (apply (%lookup echo 'outputs) nil)))

(defun test7 ()
  (let ((echo (Echo/new "test")))
    (apply (%lookup echo 'handle) (list (Input-Message/new "stdin" "hello world")))
    (apply (%lookup echo 'for-each-output)
           (list (lambda (msg)
                   (format *standard-output* "{~a: ~a}~%"
                           (apply (%lookup msg 'port) nil)
                           (apply (%lookup msg 'data) nil)
                           ))))
    (values)))

(defun display-message (msg)
  (format *standard-output* "{~a: ~a}~%"
          (apply (%lookup msg 'port) nil)
          (apply (%lookup msg 'data) nil)))

(defun test8 ()
  (let ((echo (Echo/new "test")))
    (apply (%lookup echo 'handle) (list (Input-Message/new "stdin" 1)))
    (apply (%lookup echo 'handle) (list (Input-Message/new "stdin" 2)))
    (apply (%lookup echo 'handle) (list (Input-Message/new "stdin" 3)))
    (apply (%lookup echo 'handle) (list (Input-Message/new "stdin" "Hello")))
    (apply (%lookup echo 'handle) (list (Input-Message/new "stdin" "World")))
    (apply (%lookup echo 'for-each-output) (list #'display-message))
    (values)))

(defun test8call ()
  (let ((echo (Echo/new "test")))
    (%call echo 'handle (Input-Message/new "stdin" 1))
    (%call echo 'handle (Input-Message/new "stdin" 2))
    (%call echo 'handle (Input-Message/new "stdin" 3))
    (%call echo 'handle (Input-Message/new "stdin" "Hello"))
    (%call echo 'handle (Input-Message/new "stdin" "World"))
    (%call echo 'for-each-output #'display-message)
    (values)))

(defun seqtest ()
  (let ((children (list 
		   (Echo/new "child 1")
		   (Echo/new "child 2"))))
        (let ((connections (list
			(Down/new (Sender/new $Me "stdin") (Sender/new (nth 0 children) "stdin"))
			(Across/new (Sender/new (nth 0 children) "stdout") (Receiver/new (nth 1 children) "stdin"))
			(Up/new (Sender/new (nth 0 children) "stderr") (Receiver/new $Me "stderr"))
			(Up/new (Sender/new (nth 1 children) "stdout") (Receiver/new $Me "stdout"))
			(Up/new (Sender/new (nth 1 children) "stderr") (Receiver/new $Me "stderr")))))
      (let ((seq (Sequential/new "sequential" children connections)))
        (%call seq 'handle (Input-Message/new "stdin" "Hello"))
        (%call seq 'step-to-completion)
        ;;(%call seq 'handle (Input-Message/new "stdin" "World"))
        (%call seq 'for-each-output #'display-message)
        (values)))))

;; (defun parallel ()
;;   (let ((children (list 
;; 		   (Echo/new "child 1")
;; 		   (Echo/new "child 2"))))
;;     (let ((connections (list
;; 			(Down/new 0 "stdin" 1 "stdin")
;; 			(Across/new 1 "stdout" 2 "stdin")
;; 			(Up/new 1 "stderr" 0 "stderr")
;; 			(Up/new 2 "stdout" 0 "stdout")
;; 			(Up/new 2 "stderr" 0 "stderr"))))
;;       (ParallelTest/new "sequential" children connections))))
