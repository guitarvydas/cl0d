(defstruct foo 
  data)

(defstruct bar 
  data)

(defun test-sxhash ()
  (print (mapcar #'sxhash (loop for i below 10 collect (make-foo :data i))))
  (print (mapcar #'sxhash (loop for i below 10 collect (make-bar :data i))))
  (let (
        (aa `((%debug . x) ,(lambda () nil)))
        (bb `((%debug . x) ,(lambda () nil)))
        (cc `((%debug . x) ,(lambda () 3)))
        (dd `((%debug . y) ,(lambda () nil)))
        (aaa (lambda () nil))
        (bbb (lambda () nil))
        (ccc (lambda () 3))
        (ddd (lambda () nil))
        (uaa `((id . ,(gensym "id")) ,(lambda () nil)))
        (ubb `((id . ,(gensym "id")) ,(lambda () nil)))
        (ucc `((id . ,(gensym "id")) ,(lambda () 3)))
        (udd `((id . ,(gensym "id")) ,(lambda () nil)))
        )
    (print (sxhash aa))
    (print (sxhash bb))
    (print (sxhash cc))
    (print (sxhash dd))
    (print (sxhash aaa))
    (print (sxhash bbb))
    (print (sxhash ccc))
    (print (sxhash ddd))
    (print (sxhash uaa))
    (print (sxhash ubb))
    (print (sxhash ucc))
    (print (sxhash udd))
    (print uaa)
    (print ubb)
    (print ucc)
    (print udd)
    )
  (values))
